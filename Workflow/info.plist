<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.alfredapp.vitor.wheresthebinary</string>
	<key>connections</key>
	<dict>
		<key>20F909AF-7519-4158-A128-8E8109389006</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>86FEC05C-3EDA-4F30-ACA0-97C1354E2A95</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Vítor Galvão</string>
	<key>description</key>
	<string>Get the full path to executables in your PATH</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Where’s the Binary</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>autopaste</key>
				<false/>
				<key>clipboardtext</key>
				<string>{query}</string>
				<key>ignoredynamicplaceholders</key>
				<false/>
				<key>transient</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.clipboard</string>
			<key>uid</key>
			<string>86FEC05C-3EDA-4F30-ACA0-97C1354E2A95</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<true/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>{var:search_keyword}</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Looking in PATH…</string>
				<key>script</key>
				<string>// Helpers
// String -&gt; String
function envVar(varName) {
  return $.NSProcessInfo
    .processInfo
    .environment
    .objectForKey(varName).js
}

// String -&gt; Bool
function isExecutable(path) {
  return $.NSFileManager.defaultManager.isExecutableFileAtPath(path)
}

// String -&gt; [URL]
function dirContents(path) {
  try {
    return $.NSFileManager
      .defaultManager
      .contentsOfDirectoryAtURLIncludingPropertiesForKeysOptionsError(
        $.NSURL.fileURLWithPath(path),
        undefined,
        $.NSDirectoryEnumerationSkipsHiddenFiles,
        undefined
      ).js
  } catch { return [] }
}

// Main
const sfItems = envVar("PATH")
  .split(":")
  .flatMap(pathDir =&gt; dirContents(pathDir))
  .flatMap(binURL =&gt; {
    const binPath = binURL.path.js

    if (!isExecutable(binPath)) return []

    const binFinal = binURL.URLByResolvingSymlinksInPath.path.js
    const isSymlink = binPath !== binFinal
    const subtitleText = isSymlink ? `${binPath} → ${binFinal}` : binPath
    const optMod = isSymlink ?
      { subtitle: binFinal, arg: binFinal } :
      { subtitle: "Not a symlink", valid: false}

    return {
      title: $(binPath).lastPathComponent.js,
      subtitle: subtitleText,
      arg: binPath,
      mods: { alt: optMod }
    }
  })

JSON.stringify({
  cache: { seconds: 3600, loosereload: true },
  items: sfItems
})</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>skipuniversalaction</key>
				<true/>
				<key>subtext</key>
				<string>{const:alfred_workflow_description}</string>
				<key>title</key>
				<string>{const:alfred_workflow_name}</string>
				<key>type</key>
				<integer>7</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>20F909AF-7519-4158-A128-8E8109389006</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>## Usage

Search for executables in [PATH](https://en.wikipedia.org/wiki/PATH_%28variable%29) via the `whereis` keyword.

![Listing ruby executables](images/about/whereis.png)

* &lt;kbd&gt;↩&lt;/kbd&gt; Copy original path.
* &lt;kbd&gt;⌥&lt;/kbd&gt;&lt;kbd&gt;↩&lt;/kbd&gt; Copy resolved path if original is a [symbolic link](https://en.wikipedia.org/wiki/Symbolic_link).</string>
	<key>uidata</key>
	<dict>
		<key>20F909AF-7519-4158-A128-8E8109389006</key>
		<dict>
			<key>xpos</key>
			<real>60</real>
			<key>ypos</key>
			<real>65</real>
		</dict>
		<key>86FEC05C-3EDA-4F30-ACA0-97C1354E2A95</key>
		<dict>
			<key>xpos</key>
			<real>260</real>
			<key>ypos</key>
			<real>65</real>
		</dict>
	</dict>
	<key>userconfigurationconfig</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string>whereis</string>
				<key>placeholder</key>
				<string></string>
				<key>required</key>
				<false/>
				<key>trim</key>
				<true/>
			</dict>
			<key>description</key>
			<string></string>
			<key>label</key>
			<string>Searck Keyword</string>
			<key>type</key>
			<string>textfield</string>
			<key>variable</key>
			<string>search_keyword</string>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string>/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</string>
				<key>placeholder</key>
				<string></string>
				<key>required</key>
				<false/>
				<key>trim</key>
				<true/>
			</dict>
			<key>description</key>
			<string></string>
			<key>label</key>
			<string>PATH override</string>
			<key>type</key>
			<string>textfield</string>
			<key>variable</key>
			<string>PATH</string>
		</dict>
	</array>
	<key>variablesdontexport</key>
	<array/>
	<key>version</key>
	<string>2024.1</string>
	<key>webaddress</key>
	<string>https://github.com/alfredapp/wheres-the-binary-workflow/</string>
</dict>
</plist>
